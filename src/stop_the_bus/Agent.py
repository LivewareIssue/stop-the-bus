from typing import Protocol

from typing_extensions import runtime_checkable

from stop_the_bus.Card import Card
from stop_the_bus.Game import View


class Agent(Protocol):
    def draw(self, view: View) -> tuple[Card, bool]: ...

    def discard(self, view: View) -> Card: ...

    def stop_the_bus(self, view: View) -> bool: ...


@runtime_checkable
class Observer(Protocol):
    def on_turn_start(self, view: View) -> None: ...

    def on_turn_end(self, view: View) -> None: ...

    def on_discard(self, agent: int, actor: int, card: Card) -> None: ...

    def on_stop_the_bus(self, agent: int, actor: int) -> None: ...

    def on_round_start(self) -> None: ...

    def on_draw(self, agent: int, actor: int, card: Card, from_deck: bool) -> None: ...
